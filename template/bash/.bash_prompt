#!/usr/bin/env bash
#
# .bash_prompt : DO NOT EDIT -- this file has been generated automatically
#
# Ref.: dotfiles/template/bash/.bash_prompt

# Terminal formating options as described on:
# Ref.: http://misc.flogisoft.com/bash/tip_colors_and_formatting

function __format_set {
  case "$1" in
    bold)               tput bold;;
    italic)             tput sitm;;
    dim)                tput dim;;
    underline)          tput smul;;
    blink)              tput blink;;
    reverse)            tput rev;;
    highlight)          tput smso;;
    fg:black)           tput setaf 0;;
    fg:red)             tput setaf 1;;
    fg:green)           tput setaf 2;;
    fg:yellow)          tput setaf 3;;
    fg:blue)            tput setaf 4;;
    fg:magenta)         tput setaf 5;;
    fg:cyan)            tput setaf 6;;
    fg:white)           tput setaf 7;;
    fg:brightblack)     tput setaf 8;;
    fg:brightred)       tput setaf 9;;
    fg:brightgreen)     tput setaf 10;;
    fg:brightyellow)    tput setaf 11;;
    fg:brightblue)      tput setaf 12;;
    fg:brightmagenta)   tput setaf 13;;
    fg:brightcyan)      tput setaf 14;;
    fg:brightwhite)     tput setaf 15;;
    fg:primary)         __format_set fg:<% color.primary_fg_name %>;;
    fg:primary_bg)      __format_set fg:<% color.primary_bg_name %>;;
    bg:black)           tput setab 0;;
    bg:red)             tput setab 1;;
    bg:green)           tput setab 2;;
    bg:yellow)          tput setab 3;;
    bg:blue)            tput setab 4;;
    bg:magenta)         tput setab 5;;
    bg:cyan)            tput setab 6;;
    bg:white)           tput setab 7;;
    bg:brightblack)     tput setab 8;;
    bg:brightred)       tput setab 9;;
    bg:brightgreen)     tput setab 10;;
    bg:brightyellow)    tput setab 11;;
    bg:brightblue)      tput setab 12;;
    bg:brightmagenta)   tput setab 13;;
    bg:brightcyan)      tput setab 14;;
    bg:primary)         __format_set bg:<% color.primary_bg_name %>;;
    bg:primary_fg)      __format_set bg:<% color.primary_fg_name %>;;
  esac
}
# Format reset options
function __format_reset {
  case "$1" in
    italic)      tput ritm;;
    highlight)   tput rmso;;
    underline)   tput rmul;;
    all)         tput sgr0;;
  esac
}

# Wrappers to set (_fs) or reset (_fr) formatting
#
# Wrappers are aware of IS_COLOR_TERM variable but beyond that they are
# pretty dumb
#
# usage: _fs format1 [format2 [format3 [...]]]
function _fs {
  if [[ "$IS_COLOR_TERM" = true ]]; then
    echo -en "\[";
    while [[ $# -gt 0 ]]; do
      __format_set $1;
      shift;
    done
    echo -en "\]";
  fi;
}
function _fr {
  if [[ "$IS_COLOR_TERM" = true ]]; then
    echo -en "\[";
    while [[ $# -gt 0 ]]; do
      __format_reset $1;
      shift;
    done
    echo -en "\]";
  fi;
}

# Print different message in different formating based on exit code
#
# usage: __exit_code exit_code
function __exit_code {
  local exit_code="$1";
  if [ $exit_code -eq 0 ]; then
    _fs fg:primary_bg; echo -n '█'; _fr all;
  else
    _fs fg:red; echo -n '░'; _fr all;
  fi
}

# Print message in different format baseed on +w rights of current user in
# current directory
#
# usage: __dir_w_mixin msg
function __dir_w_mixin {
  if [[ -w '.' ]]; then
    _fr all; echo -n ' '; echo -n $1; echo -n ' ';
  else
    _fs fg:red; echo -n ' '; echo -n $1; echo -n ' '; _fr all;
  fi;
}

# Print MSG1 if it's shorter than X characters or MSG 2 otherwise.
#
# usage __echo_len MSG1 X MSG2
function __echo_len {
  if [[ $(expr length $1) -lt $2 ]]; then
    echo $1;
  else
    echo $3;
  fi;
}

# Prints current working directory, but tries to substitute it's parts
# by bash variables
#
# usage __pwd
function __pwd {
  local path_vars=`export | sed s/'declare -x '//g | awk -F= '{if ($2 ~ /^"\//) print $1}' | grep -v PWD`
  local current_path=`pwd $@`

  while read -r line; do
    if [[ $current_path =~ ^${!line}.* ]]; then
      case $line in
      HOME)
        echo ${current_path/${!line}/'~'}
        ;;
      *)
        echo -n '$'
        echo ${current_path/${!line}/$line}
        ;;
      esac
      return 0
    fi
  done <<< "$path_vars"

  echo $current_path
  return 1
}

# Additional info if current dir is git repository
#
# usage: __git_info
function __git_info { 
  local GIT_BRANCH_SYMBOL='└┐┘ '
  local GIT_BRANCH_CHANGED_SYMBOL='+'
  local GIT_NEED_PUSH_SYMBOL='▲'
  local GIT_NEED_PULL_SYMBOL='▼'

  [ -x "$(which git)" ] || return 0 # git not found

  # force git output in English to make our work easier
  local git_eng="env LANG=C git"
  # get current branch name or short SHA1 hash for detached head
  local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
  [ -n "$branch" ] || return 0 # git branch not found

  local marks

  # branch is modified?
  [ -n "$($git_eng status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

  # how many commits local branch is ahead/behind of remote?
  local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
  local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
  local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
  [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
  [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

  # print the git branch segment without a trailing newline
  _fs bg:blue; echo -n " $GIT_BRANCH_SYMBOL$branch$marks "; _fr all;
  return 1
}

# Additional info if currently in some kind of development jail
# e.g. (Python virtualenv)
#
# usage: __devjail_info
function __devjail_info {
  local jails=()

  # init Python virtualenv
  [ $VIRTUAL_ENV ] && jails+=("py:$(basename $VIRTUAL_ENV) ")
  # check if inside of docker container
  cat /proc/self/cgroup | grep '0::/system.slice/containerd.service' > /dev/null 2>&1 && \
      jails+=("dkr:$(hostname) ")
  # check if inside debian chroot
  [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ] && \
      jails+=("chr:$(cat /etc/debian_chroot) ")

  [[ ! -z $jails ]] || return 0 # no jails currently used

  for (( i=0; i<${#jails[@]}; i++ )); do
    if [[ $(($i % 2)) -eq 1 ]]; then _fs bg:green fg:black;
    else _fs bg:cyan fg:black; fi
    echo -n ' '; echo -n "${jails[$i]}"; _fr all;
  done
  return 1
}

# Basic host info
#
# usage: __host_info
function __host_info {
  _fs fg:primary_bg
  echo    "  , ,  "
  _fs fg:primary bg:primary
  echo -n " [+_-] "
  _fs fg:black bg:white
  echo -n " \h [\j] "
  _fr all
  return 1
}

# Basic current directory info with colors
#
# usage: __pwd_info
function __pwd_info {
  __dir_w_mixin $(__pwd)
  return 1
}

function __prompt {
  local EXIT="$?";

  if [ "$TERM" != 'dumb' -o -n "$INSIDE_EMACS" ] && [ -n "$PS1" ]; then
    local blocks=''
    local blockscount=0

    for b in __host_info __devjail_info __git_info __pwd_info ; do
      blocks+="$($b)"
      let "blockscount = $blockscount + $?"
    done

    export PS1="${blocks}\n$(__exit_code $EXIT) $(_fr all)";
    export PS2="▌"
  fi;
}

export PROMPT_COMMAND=__prompt
